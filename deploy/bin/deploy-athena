#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" && cd "$dir"
resources_dir="${dir}/../../resources"
task=''
staging_deploy=''

usage(){ echo "Usage: deploy-athena: ${0} [--task <deploy-ddl|msck-repair-partitions|...>]" 1>&2; exit 1; }
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--task) task="$2"; shift ;;
    --testing) task='testing' ;;
    --staging) staging_deploy='y' ;;
  esac
  shift
done
if [[ -z $task ]]; then usage; fi

setup(){
  src_dir="${dir}"

  source "${src_dir}/util"

  if [[ $(whoami) == 'root' ]] || [[ $(whoami) == 'circleci' ]]; then
    source "${src_dir}/athena"
  elif [[ $(whoami) == 'skilbjo' ]]; then
    source "/Users/skilbjo/dev/engineering/src/athena.user"
  else
    >&2 echo "user is: $(whoami), add to setup fn"
  fi

  if [[ ! -z $CIRCLE_BRANCH ]] && [[ $CIRCLE_BRANCH != 'master' ]]; then
    staging_deploy='y'
  fi
}

repair_partitions_inline(){
  refresh_partitions 'datalake' 'currency' &
  refresh_partitions 'datalake' 'economics' &
  refresh_partitions 'datalake' 'equities' &
  refresh_partitions 'datalake' 'interest_rates' &
  sleep 1
  refresh_partitions 'datalake' 'real_estate' &
  sleep 1
  wait
}

execute_ddl_concurrent(){
  local file="$1"
  set +u; local create_database="$2"; set -u
  set +u; local staging="$3"; set -u

  local max_submitted='4'
  local max_concurrency='12'
  local sleep_time=2

  local STMTS=''
  local submitted=''
  local concurrency=''
  local stmt=''
  IFS=';'

  read -ra STMTS <<< $(cat "$file" | tr '\n' ' ')
  for i in "${!STMTS[@]}"; do
    submitted="$(echo "$i % $max_submitted" | bc)"
    concurrency="$(echo "$i % $max_concurrency" | bc)"
    stmt="${STMTS[$i]}"

    sleep "$sleep_time"

    if [[ ! -z $staging ]]; then
      staging_stmt="$(echo "$stmt" | sed 's/ datalake / staging /' | sed 's/ datalake/ staging/' | sed 's/ datalake\./ staging\./' | sed 's/datalake\/markets-etl/datalake\/staging/')"
      echo "$staging_stmt"; query "$staging_stmt" &
    else
      echo "$stmt"; query "$stmt" &
    fi

    if [[ ! -z $create_database ]] && [[ $i -le 2 ]]; then # drop database and create schema take a while
      wait && sleep "$sleep_time"
    fi

    if [[ $submitted -eq $max_submitted ]]; then  # can only submit 4 requests per second
      echo 'pausing on submitted' && sleep "$sleep_time"
    fi

    if [[ $concurrency -eq $max_concurrency ]]; then # can only have 15 queries running at one time
      echo 'pausing on concurrency' && wait
    fi
  done
}

deploy_ddl_concurrent(){
  set +u; local staging="$1"; set -u

  for schema in $(ls ${resources_dir}/athena/*.sql | grep -v s3_logs.sql); do # top level; drop/create schema, or small schemas
    execute_ddl_concurrent "$schema" 'y' "$staging"; wait
  done

  for nested_file in "${resources_dir}/athena/"*/*.sql; do  # nested
    execute_ddl_concurrent "$nested_file" '' "$staging"; wait
  done
}

setup

case "$task" in
  deploy-ddl )        deploy_ddl_concurrent "$staging_deploy" ;;
  staging )           deploy_ddl_concurrent 'y' ;;
  repair-partitions ) repair_partitions_inline ;;
  * ) echo 'In deploy-athena but got no args.' && exit 1 ;;
esac
